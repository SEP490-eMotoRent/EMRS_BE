// <auto-generated />
using System;
using EMRS.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EMRS.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(EMRSDbContext))]
    [Migration("20251025140414_FixNameForField")]
    partial class FixNameForField
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EMRS.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Fullname")
                        .HasColumnType("text")
                        .HasColumnName("fullname");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsRefreshTokenRevoked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_refresh_token_revoked");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("refresh_token");

                    b.Property<DateTimeOffset?>("RefreshTokenExpiry")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("refresh_token_expiry");

                    b.Property<string>("ResetPasswordToken")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("reset_password_token");

                    b.Property<DateTimeOffset?>("ResetPasswordTokenExpiry")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reset_password_token_expiry");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_accounts");

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("EMRS.Domain.Entities.AdditionalFee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uuid")
                        .HasColumnName("booking_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("FeeType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fee_type");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_additional_fees");

                    b.HasIndex("BookingId")
                        .HasDatabaseName("ix_additional_fees_booking_id");

                    b.ToTable("additional_fees", (string)null);
                });

            modelBuilder.Entity("EMRS.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("ActualReturnDatetime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("actual_return_datetime");

                    b.Property<decimal>("AverageRentalPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("average_rental_price");

                    b.Property<decimal>("BaseRentalFee")
                        .HasColumnType("numeric")
                        .HasColumnName("base_rental_fee");

                    b.Property<string>("BookingStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("booking_status");

                    b.Property<decimal>("CleaningFee")
                        .HasColumnType("numeric")
                        .HasColumnName("cleaning_fee");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal>("CrossBranchFee")
                        .HasColumnType("numeric")
                        .HasColumnName("cross_branch_fee");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<decimal>("DepositAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("deposit_amount");

                    b.Property<DateTime?>("EndDatetime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_datetime");

                    b.Property<decimal>("ExcessKmFee")
                        .HasColumnType("numeric")
                        .HasColumnName("excess_km_fee");

                    b.Property<Guid?>("HandoverBranchId")
                        .HasColumnType("uuid")
                        .HasColumnName("handover_branch_id");

                    b.Property<Guid?>("InsurancePackageId")
                        .HasColumnType("uuid")
                        .HasColumnName("insurance_package_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<decimal>("LateReturnFee")
                        .HasColumnType("numeric")
                        .HasColumnName("late_return_fee");

                    b.Property<decimal>("RefundAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("refund_amount");

                    b.Property<decimal>("RentalDays")
                        .HasColumnType("numeric")
                        .HasColumnName("rental_days");

                    b.Property<decimal>("RentalHours")
                        .HasColumnType("numeric")
                        .HasColumnName("rental_hours");

                    b.Property<Guid>("RenterId")
                        .HasColumnType("uuid")
                        .HasColumnName("renter_id");

                    b.Property<decimal>("RentingRate")
                        .HasColumnType("numeric")
                        .HasColumnName("renting_rate");

                    b.Property<Guid?>("ReturnBranchId")
                        .HasColumnType("uuid")
                        .HasColumnName("return_branch_id");

                    b.Property<DateTime?>("StartDatetime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_datetime");

                    b.Property<decimal>("TotalAdditionalFee")
                        .HasColumnType("numeric")
                        .HasColumnName("total_additional_fee");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("total_amount");

                    b.Property<decimal>("TotalChargingFee")
                        .HasColumnType("numeric")
                        .HasColumnName("total_charging_fee");

                    b.Property<decimal>("TotalRentalFee")
                        .HasColumnType("numeric")
                        .HasColumnName("total_rental_fee");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("VehicleId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehicle_id");

                    b.Property<Guid>("VehicleModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehicle_model_id");

                    b.HasKey("Id")
                        .HasName("pk_bookings");

                    b.HasIndex("HandoverBranchId")
                        .HasDatabaseName("ix_bookings_handover_branch_id");

                    b.HasIndex("InsurancePackageId")
                        .HasDatabaseName("ix_bookings_insurance_package_id");

                    b.HasIndex("RenterId")
                        .HasDatabaseName("ix_bookings_renter_id");

                    b.HasIndex("ReturnBranchId")
                        .HasDatabaseName("ix_bookings_return_branch_id");

                    b.HasIndex("VehicleId")
                        .HasDatabaseName("ix_bookings_vehicle_id");

                    b.HasIndex("VehicleModelId")
                        .HasDatabaseName("ix_bookings_vehicle_model_id");

                    b.ToTable("bookings", (string)null);
                });

            modelBuilder.Entity("EMRS.Domain.Entities.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("branch_name");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("ClosingTime")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("closing_time");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("OpeningTime")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("opening_time");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_branches");

                    b.ToTable("branches", (string)null);
                });

            modelBuilder.Entity("EMRS.Domain.Entities.ChargingRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uuid")
                        .HasColumnName("booking_id");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uuid")
                        .HasColumnName("branch_id");

                    b.Property<DateTime?>("ChargingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("charging_date");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<decimal>("EndBatteryPercentage")
                        .HasColumnType("numeric")
                        .HasColumnName("end_battery_percentage");

                    b.Property<decimal>("Fee")
                        .HasColumnType("numeric")
                        .HasColumnName("fee");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<decimal>("KwhCharged")
                        .HasColumnType("numeric")
                        .HasColumnName("kwh_charged");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<decimal>("RatePerKwh")
                        .HasColumnType("numeric")
                        .HasColumnName("rate_per_kwh");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uuid")
                        .HasColumnName("staff_id");

                    b.Property<decimal>("StartBatteryPercentage")
                        .HasColumnType("numeric")
                        .HasColumnName("start_battery_percentage");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_charging_records");

                    b.HasIndex("BookingId")
                        .HasDatabaseName("ix_charging_records_booking_id");

                    b.HasIndex("BranchId")
                        .HasDatabaseName("ix_charging_records_branch_id");

                    b.HasIndex("StaffId")
                        .HasDatabaseName("ix_charging_records_staff_id");

                    b.ToTable("charging_records", (string)null);
                });

            modelBuilder.Entity("EMRS.Domain.Entities.Configuration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Value1")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value1");

                    b.Property<string>("Value2")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value2");

                    b.HasKey("Id")
                        .HasName("pk_configurations");

                    b.ToTable("configurations", (string)null);
                });

            modelBuilder.Entity("EMRS.Domain.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("document_number");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("document_type");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiry_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("issue_date");

                    b.Property<string>("IssuingAuthority")
                        .HasColumnType("text")
                        .HasColumnName("issuing_authority");

                    b.Property<Guid>("RenterId")
                        .HasColumnType("uuid")
                        .HasColumnName("renter_id");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("VerificationStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("verification_status");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("verified_at");

                    b.HasKey("Id")
                        .HasName("pk_documents");

                    b.HasIndex("RenterId")
                        .HasDatabaseName("ix_documents_renter_id");

                    b.ToTable("documents", (string)null);
                });

            modelBuilder.Entity("EMRS.Domain.Entities.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uuid")
                        .HasColumnName("booking_id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<decimal>("Rating")
                        .HasColumnType("numeric")
                        .HasColumnName("rating");

                    b.Property<Guid>("RenterId")
                        .HasColumnType("uuid")
                        .HasColumnName("renter_id");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_feedbacks");

                    b.HasIndex("BookingId")
                        .IsUnique()
                        .HasDatabaseName("ix_feedbacks_booking_id");

                    b.HasIndex("RenterId")
                        .HasDatabaseName("ix_feedbacks_renter_id");

                    b.ToTable("feedbacks", (string)null);
                });

            modelBuilder.Entity("EMRS.Domain.Entities.HolidayPricing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EffectiveFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("effective_from");

                    b.Property<DateTime?>("EffectiveTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("effective_to");

                    b.Property<DateTime?>("HolidayDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("holiday_date");

                    b.Property<string>("HolidayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("holiday_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<decimal>("PriceMultiplier")
                        .HasColumnType("numeric")
                        .HasColumnName("price_multiplier");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_holiday_pricings");

                    b.ToTable("holiday_pricings", (string)null);
                });

            modelBuilder.Entity("EMRS.Domain.Entities.InsuranceClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uuid")
                        .HasColumnName("booking_id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("IncidentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("incident_date");

                    b.Property<string>("IncidentLocation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("incident_location");

                    b.Property<string>("InsuranceClaimPdfUrl")
                        .HasColumnType("text")
                        .HasColumnName("insurance_claim_pdf_url");

                    b.Property<decimal>("InsuranceCoverageAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("insurance_coverage_amount");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<decimal>("PersonInjuryCost")
                        .HasColumnType("numeric")
                        .HasColumnName("person_injury_cost");

                    b.Property<string>("RejectionReason")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rejection_reason");

                    b.Property<Guid>("RenterId")
                        .HasColumnType("uuid")
                        .HasColumnName("renter_id");

                    b.Property<decimal>("RenterLiabilityAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("renter_liability_amount");

                    b.Property<DateTime?>("ReviewedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reviewed_date");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("severity");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<decimal>("ThirdPartyCost")
                        .HasColumnType("numeric")
                        .HasColumnName("third_party_cost");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("numeric")
                        .HasColumnName("total_cost");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<decimal>("VehicleDamageCost")
                        .HasColumnType("numeric")
                        .HasColumnName("vehicle_damage_cost");

                    b.HasKey("Id")
                        .HasName("pk_insurance_claims");

                    b.HasIndex("BookingId")
                        .IsUnique()
                        .HasDatabaseName("ix_insurance_claims_booking_id");

                    b.HasIndex("RenterId")
                        .HasDatabaseName("ix_insurance_claims_renter_id");

                    b.ToTable("insurance_claims", (string)null);
                });

            modelBuilder.Entity("EMRS.Domain.Entities.InsurancePackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("CoveragePersonLimit")
                        .HasColumnType("numeric")
                        .HasColumnName("coverage_person_limit");

                    b.Property<decimal>("CoveragePropertyLimit")
                        .HasColumnType("numeric")
                        .HasColumnName("coverage_property_limit");

                    b.Property<decimal>("CoverageTheft")
                        .HasColumnType("numeric")
                        .HasColumnName("coverage_theft");

                    b.Property<decimal>("CoverageVehiclePercentage")
                        .HasColumnType("numeric")
                        .HasColumnName("coverage_vehicle_percentage");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal>("DeductibleAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("deductible_amount");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<decimal>("PackageFee")
                        .HasColumnType("numeric")
                        .HasColumnName("package_fee");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("package_name");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_insurance_packages");

                    b.ToTable("insurance_packages", (string)null);
                });

            modelBuilder.Entity("EMRS.Domain.Entities.MaintenanceRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("IssuesFound")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("issues_found");

                    b.Property<DateTime?>("MaintenanceDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("maintenance_date");

                    b.Property<Guid>("MaintenanceScheduleId")
                        .HasColumnType("uuid")
                        .HasColumnName("maintenance_schedule_id");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uuid")
                        .HasColumnName("staff_id");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_maintenance_records");

                    b.HasIndex("MaintenanceScheduleId")
                        .IsUnique()
                        .HasDatabaseName("ix_maintenance_records_maintenance_schedule_id");

                    b.HasIndex("StaffId")
                        .HasDatabaseName("ix_maintenance_records_staff_id");

                    b.ToTable("maintenance_records", (string)null);
                });

            modelBuilder.Entity("EMRS.Domain.Entities.MaintenanceSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Checklist")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("checklist");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("FrequencyType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("frequency_type");

                    b.Property<decimal>("FrequencyValueDays")
                        .HasColumnType("numeric")
                        .HasColumnName("frequency_value_days");

                    b.Property<decimal>("FrequencyValueKm")
                        .HasColumnType("numeric")
                        .HasColumnName("frequency_value_km");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("ScheduleTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("schedule_title");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uuid")
                        .HasColumnName("staff_id");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("pk_maintenance_schedules");

                    b.HasIndex("StaffId")
                        .HasDatabaseName("ix_maintenance_schedules_staff_id");

                    b.HasIndex("VehicleId")
                        .HasDatabaseName("ix_maintenance_schedules_vehicle_id");

                    b.ToTable("maintenance_schedules", (string)null);
                });

            modelBuilder.Entity("EMRS.Domain.Entities.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DocNo")
                        .HasColumnType("uuid")
                        .HasColumnName("doc_no");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("entity_type");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_url");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("media_type");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_media");

                    b.ToTable("media", (string)null);
                });

            modelBuilder.Entity("EMRS.Domain.Entities.Membership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("numeric")
                        .HasColumnName("discount_percentage");

                    b.Property<decimal>("FreeChargingPerMonth")
                        .HasColumnType("numeric")
                        .HasColumnName("free_charging_per_month");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<decimal>("MinBookings")
                        .HasColumnType("numeric")
                        .HasColumnName("min_bookings");

                    b.Property<string>("TierName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tier_name");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_memberships");

                    b.ToTable("memberships", (string)null);
                });

            modelBuilder.Entity("EMRS.Domain.Entities.RentalContract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uuid")
                        .HasColumnName("booking_id");

                    b.Property<string>("ContractNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contract_number");

                    b.Property<string>("ContractPdfUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contract_pdf_url");

                    b.Property<string>("ContractStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contract_status");

                    b.Property<string>("ContractTerms")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contract_terms");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expire_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("OtpCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("otp_code");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_rental_contracts");

                    b.HasIndex("BookingId")
                        .IsUnique()
                        .HasDatabaseName("ix_rental_contracts_booking_id");

                    b.ToTable("rental_contracts", (string)null);
                });

            modelBuilder.Entity("EMRS.Domain.Entities.RentalPricing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<decimal>("ExcessKmPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("excess_km_price");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<decimal>("RentalPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("rental_price");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_rental_pricings");

                    b.ToTable("rental_pricings", (string)null);
                });

            modelBuilder.Entity("EMRS.Domain.Entities.RentalReceipt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("BatteryPercentage")
                        .HasColumnType("numeric")
                        .HasColumnName("battery_percentage");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uuid")
                        .HasColumnName("booking_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<decimal>("EndBatteryPercentage")
                        .HasColumnType("numeric")
                        .HasColumnName("end_battery_percentage");

                    b.Property<decimal>("EndOdometerKm")
                        .HasColumnType("numeric")
                        .HasColumnName("end_odometer_km");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<decimal>("OdometerReading")
                        .HasColumnType("numeric")
                        .HasColumnName("odometer_reading");

                    b.Property<DateTime?>("ReceiptDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("receipt_date");

                    b.Property<string>("ReceiptType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("receipt_type");

                    b.Property<DateTime?>("RenterConfirmedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("renter_confirmed_at");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uuid")
                        .HasColumnName("staff_id");

                    b.Property<decimal>("StartBatteryPercentage")
                        .HasColumnType("numeric")
                        .HasColumnName("start_battery_percentage");

                    b.Property<decimal>("StartOdometerKm")
                        .HasColumnType("numeric")
                        .HasColumnName("start_odometer_km");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_rental_receipts");

                    b.HasIndex("BookingId")
                        .IsUnique()
                        .HasDatabaseName("ix_rental_receipts_booking_id");

                    b.HasIndex("StaffId")
                        .HasDatabaseName("ix_rental_receipts_staff_id");

                    b.ToTable("rental_receipts", (string)null);
                });

            modelBuilder.Entity("EMRS.Domain.Entities.Renter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("avatar_url");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DateOfBirth")
                        .HasColumnType("text")
                        .HasColumnName("date_of_birth");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("is_verified");

                    b.Property<Guid>("MembershipId")
                        .HasColumnType("uuid")
                        .HasColumnName("membership_id");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("VerificationCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("verification_code");

                    b.Property<DateTime?>("VerificationCodeExpiry")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("verification_code_expiry");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.HasKey("Id")
                        .HasName("pk_renters");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasDatabaseName("ix_renters_account_id");

                    b.HasIndex("MembershipId")
                        .HasDatabaseName("ix_renters_membership_id");

                    b.ToTable("renters", (string)null);
                });

            modelBuilder.Entity("EMRS.Domain.Entities.RepairRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("approved_at");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("IssueDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("issue_description");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("priority");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uuid")
                        .HasColumnName("staff_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("pk_repair_requests");

                    b.HasIndex("StaffId")
                        .HasDatabaseName("ix_repair_requests_staff_id");

                    b.HasIndex("VehicleId")
                        .HasDatabaseName("ix_repair_requests_vehicle_id");

                    b.ToTable("repair_requests", (string)null);
                });

            modelBuilder.Entity("EMRS.Domain.Entities.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uuid")
                        .HasColumnName("branch_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_staffs");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasDatabaseName("ix_staffs_account_id");

                    b.HasIndex("BranchId")
                        .HasDatabaseName("ix_staffs_branch_id");

                    b.ToTable("staffs", (string)null);
                });

            modelBuilder.Entity("EMRS.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DocNo")
                        .HasColumnType("uuid")
                        .HasColumnName("doc_no");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("transaction_type");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_transactions");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("EMRS.Domain.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("BatteryHealthPercentage")
                        .HasColumnType("numeric")
                        .HasColumnName("battery_health_percentage");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uuid")
                        .HasColumnName("branch_id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal>("CurrentOdometerKm")
                        .HasColumnType("numeric")
                        .HasColumnName("current_odometer_km");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("LastMaintenanceDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_maintenance_date");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("license_plate");

                    b.Property<DateTime?>("NextMaintenanceDue")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("next_maintenance_due");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("purchase_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("VehicleModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehicle_model_id");

                    b.Property<DateTime?>("YearOfManufacture")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("year_of_manufacture");

                    b.HasKey("Id")
                        .HasName("pk_vehicles");

                    b.HasIndex("BranchId")
                        .HasDatabaseName("ix_vehicles_branch_id");

                    b.HasIndex("VehicleModelId")
                        .HasDatabaseName("ix_vehicles_vehicle_model_id");

                    b.ToTable("vehicles", (string)null);
                });

            modelBuilder.Entity("EMRS.Domain.Entities.VehicleModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("BatteryCapacityKwh")
                        .HasColumnType("numeric")
                        .HasColumnName("battery_capacity_kwh");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<decimal>("MaxRangeKm")
                        .HasColumnType("numeric")
                        .HasColumnName("max_range_km");

                    b.Property<decimal>("MaxSpeedKmh")
                        .HasColumnType("numeric")
                        .HasColumnName("max_speed_kmh");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("model_name");

                    b.Property<Guid>("RentalPricingId")
                        .HasColumnType("uuid")
                        .HasColumnName("rental_pricing_id");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_vehicle_models");

                    b.HasIndex("RentalPricingId")
                        .HasDatabaseName("ix_vehicle_models_rental_pricing_id");

                    b.ToTable("vehicle_models", (string)null);
                });

            modelBuilder.Entity("EMRS.Domain.Entities.VehicleTransferOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("FromBranchId")
                        .HasColumnType("uuid")
                        .HasColumnName("from_branch_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("received_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid>("ToBranchId")
                        .HasColumnType("uuid")
                        .HasColumnName("to_branch_id");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_vehicle_transfer_orders");

                    b.HasIndex("FromBranchId")
                        .HasDatabaseName("ix_vehicle_transfer_orders_from_branch_id");

                    b.HasIndex("ToBranchId")
                        .HasDatabaseName("ix_vehicle_transfer_orders_to_branch_id");

                    b.ToTable("vehicle_transfer_orders", (string)null);
                });

            modelBuilder.Entity("EMRS.Domain.Entities.VehicleTransferRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<decimal>("QuantityRequested")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity_requested");

                    b.Property<DateTime?>("RequestedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("requested_at");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reviewed_at");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uuid")
                        .HasColumnName("staff_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("VehicleTransferOrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehicle_transfer_order_id");

                    b.HasKey("Id")
                        .HasName("pk_vehicle_transfer_requests");

                    b.HasIndex("StaffId")
                        .HasDatabaseName("ix_vehicle_transfer_requests_staff_id");

                    b.HasIndex("VehicleTransferOrderId")
                        .HasDatabaseName("ix_vehicle_transfer_requests_vehicle_transfer_order_id");

                    b.ToTable("vehicle_transfer_requests", (string)null);
                });

            modelBuilder.Entity("EMRS.Domain.Entities.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric")
                        .HasColumnName("balance");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid?>("RenterId")
                        .HasColumnType("uuid")
                        .HasColumnName("renter_id");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_wallets");

                    b.HasIndex("RenterId")
                        .IsUnique()
                        .HasDatabaseName("ix_wallets_renter_id");

                    b.ToTable("wallets", (string)null);
                });

            modelBuilder.Entity("EMRS.Domain.Entities.WithdrawalRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<string>("BankAccountName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bank_account_name");

                    b.Property<string>("BankAccountNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bank_account_number");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bank_name");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_at");

                    b.Property<string>("RejectionReason")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rejection_reason");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uuid")
                        .HasColumnName("wallet_id");

                    b.HasKey("Id")
                        .HasName("pk_withdrawal_requests");

                    b.HasIndex("WalletId")
                        .HasDatabaseName("ix_withdrawal_requests_wallet_id");

                    b.ToTable("withdrawal_requests", (string)null);
                });

            modelBuilder.Entity("EMRS.Domain.Entities.AdditionalFee", b =>
                {
                    b.HasOne("EMRS.Domain.Entities.Booking", "Booking")
                        .WithMany("AdditionalFees")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_additional_fees_bookings_booking_id");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("EMRS.Domain.Entities.Booking", b =>
                {
                    b.HasOne("EMRS.Domain.Entities.Branch", "HandoverBranch")
                        .WithMany("HandoverBookings")
                        .HasForeignKey("HandoverBranchId")
                        .HasConstraintName("fk_bookings_branches_handover_branch_id");

                    b.HasOne("EMRS.Domain.Entities.InsurancePackage", "InsurancePackage")
                        .WithMany("Bookings")
                        .HasForeignKey("InsurancePackageId")
                        .HasConstraintName("fk_bookings_insurance_packages_insurance_package_id");

                    b.HasOne("EMRS.Domain.Entities.Renter", "Renter")
                        .WithMany("Bookings")
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bookings_renters_renter_id");

                    b.HasOne("EMRS.Domain.Entities.Branch", "ReturnBranch")
                        .WithMany("ReturnBookings")
                        .HasForeignKey("ReturnBranchId")
                        .HasConstraintName("fk_bookings_branches_return_branch_id");

                    b.HasOne("EMRS.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("Bookings")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("fk_bookings_vehicles_vehicle_id");

                    b.HasOne("EMRS.Domain.Entities.VehicleModel", "VehicleModel")
                        .WithMany("Bookings")
                        .HasForeignKey("VehicleModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bookings_vehicle_models_vehicle_model_id");

                    b.Navigation("HandoverBranch");

                    b.Navigation("InsurancePackage");

                    b.Navigation("Renter");

                    b.Navigation("ReturnBranch");

                    b.Navigation("Vehicle");

                    b.Navigation("VehicleModel");
                });

            modelBuilder.Entity("EMRS.Domain.Entities.ChargingRecord", b =>
                {
                    b.HasOne("EMRS.Domain.Entities.Booking", "Booking")
                        .WithMany("ChargingRecords")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_charging_records_bookings_booking_id");

                    b.HasOne("EMRS.Domain.Entities.Branch", "Branch")
                        .WithMany("ChargingRecords")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_charging_records_branches_branch_id");

                    b.HasOne("EMRS.Domain.Entities.Staff", "Staff")
                        .WithMany("ChargingRecords")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_charging_records_staffs_staff_id");

                    b.Navigation("Booking");

                    b.Navigation("Branch");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("EMRS.Domain.Entities.Document", b =>
                {
                    b.HasOne("EMRS.Domain.Entities.Renter", "Renter")
                        .WithMany("Documents")
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_documents_renters_renter_id");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("EMRS.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("EMRS.Domain.Entities.Booking", "Booking")
                        .WithOne("Feedback")
                        .HasForeignKey("EMRS.Domain.Entities.Feedback", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_feedbacks_bookings_booking_id");

                    b.HasOne("EMRS.Domain.Entities.Renter", "Renter")
                        .WithMany("Feedbacks")
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_feedbacks_renters_renter_id");

                    b.Navigation("Booking");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("EMRS.Domain.Entities.InsuranceClaim", b =>
                {
                    b.HasOne("EMRS.Domain.Entities.Booking", "Booking")
                        .WithOne("InsuranceClaim")
                        .HasForeignKey("EMRS.Domain.Entities.InsuranceClaim", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_insurance_claims_bookings_booking_id");

                    b.HasOne("EMRS.Domain.Entities.Renter", "Renter")
                        .WithMany("InsuranceClaims")
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_insurance_claims_renters_renter_id");

                    b.Navigation("Booking");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("EMRS.Domain.Entities.MaintenanceRecord", b =>
                {
                    b.HasOne("EMRS.Domain.Entities.MaintenanceSchedule", "MaintenanceSchedule")
                        .WithOne("MaintenanceRecord")
                        .HasForeignKey("EMRS.Domain.Entities.MaintenanceRecord", "MaintenanceScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_maintenance_records_maintenance_schedules_maintenance_sched");

                    b.HasOne("EMRS.Domain.Entities.Staff", "Staff")
                        .WithMany("MaintenanceRecords")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_maintenance_records_staffs_staff_id");

                    b.Navigation("MaintenanceSchedule");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("EMRS.Domain.Entities.MaintenanceSchedule", b =>
                {
                    b.HasOne("EMRS.Domain.Entities.Staff", "Staff")
                        .WithMany("MaintenanceSchedules")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_maintenance_schedules_staffs_staff_id");

                    b.HasOne("EMRS.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("MaintenanceSchedules")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_maintenance_schedules_vehicles_vehicle_id");

                    b.Navigation("Staff");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("EMRS.Domain.Entities.RentalContract", b =>
                {
                    b.HasOne("EMRS.Domain.Entities.Booking", "Booking")
                        .WithOne("RentalContract")
                        .HasForeignKey("EMRS.Domain.Entities.RentalContract", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rental_contracts_bookings_booking_id");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("EMRS.Domain.Entities.RentalReceipt", b =>
                {
                    b.HasOne("EMRS.Domain.Entities.Booking", "Booking")
                        .WithOne("RentalReceipt")
                        .HasForeignKey("EMRS.Domain.Entities.RentalReceipt", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rental_receipts_bookings_booking_id");

                    b.HasOne("EMRS.Domain.Entities.Staff", "Staff")
                        .WithMany("RentalReceipts")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rental_receipts_staffs_staff_id");

                    b.Navigation("Booking");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("EMRS.Domain.Entities.Renter", b =>
                {
                    b.HasOne("EMRS.Domain.Entities.Account", "Account")
                        .WithOne("Renter")
                        .HasForeignKey("EMRS.Domain.Entities.Renter", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_renters_accounts_account_id");

                    b.HasOne("EMRS.Domain.Entities.Membership", "Membership")
                        .WithMany("Renters")
                        .HasForeignKey("MembershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_renters_memberships_membership_id");

                    b.Navigation("Account");

                    b.Navigation("Membership");
                });

            modelBuilder.Entity("EMRS.Domain.Entities.RepairRequest", b =>
                {
                    b.HasOne("EMRS.Domain.Entities.Staff", "Staff")
                        .WithMany("RepairRequests")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_repair_requests_staffs_staff_id");

                    b.HasOne("EMRS.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("RepairRequests")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_repair_requests_vehicles_vehicle_id");

                    b.Navigation("Staff");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("EMRS.Domain.Entities.Staff", b =>
                {
                    b.HasOne("EMRS.Domain.Entities.Account", "Account")
                        .WithOne("Staff")
                        .HasForeignKey("EMRS.Domain.Entities.Staff", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_staffs_accounts_account_id");

                    b.HasOne("EMRS.Domain.Entities.Branch", "Branch")
                        .WithMany("Staffs")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("fk_staffs_branches_branch_id");

                    b.Navigation("Account");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("EMRS.Domain.Entities.Vehicle", b =>
                {
                    b.HasOne("EMRS.Domain.Entities.Branch", "Branch")
                        .WithMany("Vehicles")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicles_branches_branch_id");

                    b.HasOne("EMRS.Domain.Entities.VehicleModel", "VehicleModel")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicles_vehicle_models_vehicle_model_id");

                    b.Navigation("Branch");

                    b.Navigation("VehicleModel");
                });

            modelBuilder.Entity("EMRS.Domain.Entities.VehicleModel", b =>
                {
                    b.HasOne("EMRS.Domain.Entities.RentalPricing", "RentalPricing")
                        .WithMany("VehicleModels")
                        .HasForeignKey("RentalPricingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicle_models_rental_pricings_rental_pricing_id");

                    b.Navigation("RentalPricing");
                });

            modelBuilder.Entity("EMRS.Domain.Entities.VehicleTransferOrder", b =>
                {
                    b.HasOne("EMRS.Domain.Entities.Branch", "FromBranch")
                        .WithMany("SentTransferOrders")
                        .HasForeignKey("FromBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicle_transfer_orders_branches_from_branch_id");

                    b.HasOne("EMRS.Domain.Entities.Branch", "ToBranch")
                        .WithMany("ReceivedTransferOrders")
                        .HasForeignKey("ToBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicle_transfer_orders_branches_to_branch_id");

                    b.Navigation("FromBranch");

                    b.Navigation("ToBranch");
                });

            modelBuilder.Entity("EMRS.Domain.Entities.VehicleTransferRequest", b =>
                {
                    b.HasOne("EMRS.Domain.Entities.Staff", "Staff")
                        .WithMany("vehicleTransferRequests")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicle_transfer_requests_staffs_staff_id");

                    b.HasOne("EMRS.Domain.Entities.VehicleTransferOrder", "VehicleTransferOrder")
                        .WithMany("VehicleTransferRequests")
                        .HasForeignKey("VehicleTransferOrderId")
                        .HasConstraintName("fk_vehicle_transfer_requests_vehicle_transfer_orders_vehicle_t");

                    b.Navigation("Staff");

                    b.Navigation("VehicleTransferOrder");
                });

            modelBuilder.Entity("EMRS.Domain.Entities.Wallet", b =>
                {
                    b.HasOne("EMRS.Domain.Entities.Renter", "Renter")
                        .WithOne("Wallet")
                        .HasForeignKey("EMRS.Domain.Entities.Wallet", "RenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_wallets_renters_renter_id");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("EMRS.Domain.Entities.WithdrawalRequest", b =>
                {
                    b.HasOne("EMRS.Domain.Entities.Wallet", "Wallet")
                        .WithMany("WithdrawalRequests")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_withdrawal_requests_wallets_wallet_id");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("EMRS.Domain.Entities.Account", b =>
                {
                    b.Navigation("Renter");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("EMRS.Domain.Entities.Booking", b =>
                {
                    b.Navigation("AdditionalFees");

                    b.Navigation("ChargingRecords");

                    b.Navigation("Feedback");

                    b.Navigation("InsuranceClaim");

                    b.Navigation("RentalContract");

                    b.Navigation("RentalReceipt");
                });

            modelBuilder.Entity("EMRS.Domain.Entities.Branch", b =>
                {
                    b.Navigation("ChargingRecords");

                    b.Navigation("HandoverBookings");

                    b.Navigation("ReceivedTransferOrders");

                    b.Navigation("ReturnBookings");

                    b.Navigation("SentTransferOrders");

                    b.Navigation("Staffs");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("EMRS.Domain.Entities.InsurancePackage", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("EMRS.Domain.Entities.MaintenanceSchedule", b =>
                {
                    b.Navigation("MaintenanceRecord");
                });

            modelBuilder.Entity("EMRS.Domain.Entities.Membership", b =>
                {
                    b.Navigation("Renters");
                });

            modelBuilder.Entity("EMRS.Domain.Entities.RentalPricing", b =>
                {
                    b.Navigation("VehicleModels");
                });

            modelBuilder.Entity("EMRS.Domain.Entities.Renter", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Documents");

                    b.Navigation("Feedbacks");

                    b.Navigation("InsuranceClaims");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("EMRS.Domain.Entities.Staff", b =>
                {
                    b.Navigation("ChargingRecords");

                    b.Navigation("MaintenanceRecords");

                    b.Navigation("MaintenanceSchedules");

                    b.Navigation("RentalReceipts");

                    b.Navigation("RepairRequests");

                    b.Navigation("vehicleTransferRequests");
                });

            modelBuilder.Entity("EMRS.Domain.Entities.Vehicle", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("MaintenanceSchedules");

                    b.Navigation("RepairRequests");
                });

            modelBuilder.Entity("EMRS.Domain.Entities.VehicleModel", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("EMRS.Domain.Entities.VehicleTransferOrder", b =>
                {
                    b.Navigation("VehicleTransferRequests");
                });

            modelBuilder.Entity("EMRS.Domain.Entities.Wallet", b =>
                {
                    b.Navigation("WithdrawalRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
